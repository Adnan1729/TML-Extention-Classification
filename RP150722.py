# -*- coding: utf-8 -*-
"""
Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-MKhEuFmkNglvq7UD5ntNuR1V-eAfgox
"""

# importing all necessary libraries and dataframes
from google.colab import drive 
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import StackingRegressor

#Importing the largest 10 csv files form google drive: 203, 204, 205, 228, 233, 251, 253, 260, 267, 339. 
drive.mount('/content/drive')

data_203 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL203.csv')
data_204 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL204.csv')
data_205 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL205.csv')
data_228 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL228.csv')
data_233 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL233.csv')
data_251 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL251.csv')
data_253 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL253.csv')
data_260 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL260.csv')
data_267 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL267.csv')
data_339 = pd.read_csv ('/content/drive/MyDrive/Ross King Research Work/QSAR Raw Data Summer 2022/CHEMBL339.csv')

#Defining dependent variables.  
x_203 = data_203.drop(columns=['molecule_id','pXC50'])
x_204 = data_204.drop(columns=['molecule_id','pXC50'])
x_205 = data_205.drop(columns=['molecule_id','pXC50'])
x_228 = data_228.drop(columns=['molecule_id','pXC50'])
x_233 = data_233.drop(columns=['molecule_id','pXC50'])
x_251 = data_251.drop(columns=['molecule_id','pXC50'])
x_253 = data_253.drop(columns=['molecule_id','pXC50'])
x_260 = data_260.drop(columns=['molecule_id','pXC50'])
x_267 = data_267.drop(columns=['molecule_id','pXC50'])
x_339 = data_339.drop(columns=['molecule_id','pXC50'])

#Defining independet variables. 
y_203 = data_203.pXC50
y_204 = data_204.pXC50
y_205 = data_205.pXC50
y_228 = data_228.pXC50
y_233 = data_233.pXC50
y_251 = data_251.pXC50
y_253 = data_253.pXC50
y_260 = data_260.pXC50
y_267 = data_267.pXC50
y_339 = data_339.pXC50

#Splitting the train/test ratio of the dataset at 0.7/0.3 for higher flexibility in the algorithm's weights
x_203_train, x_203_test, y_203_train, y_203_test = train_test_split(x_203, y_203, test_size=0.3)
x_204_train, x_204_test, y_204_train, y_204_test = train_test_split(x_204, y_204, test_size=0.3)
x_205_train, x_205_test, y_205_train, y_205_test = train_test_split(x_205, y_205, test_size=0.3)
x_228_train, x_228_test, y_228_train, y_228_test = train_test_split(x_228, y_228, test_size=0.3)
x_233_train, x_233_test, y_233_train, y_233_test = train_test_split(x_233, y_233, test_size=0.3)
x_251_train, x_251_test, y_251_train, y_251_test = train_test_split(x_251, y_251, test_size=0.3)
x_253_train, x_253_test, y_253_train, y_253_test = train_test_split(x_253, y_253, test_size=0.3)
x_260_train, x_260_test, y_260_train, y_260_test = train_test_split(x_260, y_260, test_size=0.3)
x_267_train, x_267_test, y_267_train, y_267_test = train_test_split(x_267, y_267, test_size=0.3)
x_339_train, x_339_test, y_339_train, y_339_test = train_test_split(x_339, y_339, test_size=0.3)

#Defining base models
model_203 = RandomForestRegressor(n_estimators=10)
model_204 = RandomForestRegressor(n_estimators=10)
model_205 = RandomForestRegressor(n_estimators=10)
model_228 = RandomForestRegressor(n_estimators=10)
model_233 = RandomForestRegressor(n_estimators=10)
model_251 = RandomForestRegressor(n_estimators=10)
model_253 = RandomForestRegressor(n_estimators=10)
model_260 = RandomForestRegressor(n_estimators=10)
model_267 = RandomForestRegressor(n_estimators=10)
model_339 = RandomForestRegressor(n_estimators=10)

#Fitting Base Models 
model_203.fit(x_203_train, y_203_train)
model_204.fit(x_204_train, y_204_train)
model_205.fit(x_205_train, y_205_train)
model_228.fit(x_228_train, y_228_train)
model_233.fit(x_233_train, y_233_train)
model_251.fit(x_251_train, y_251_train)
model_253.fit(x_253_train, y_253_train)
model_260.fit(x_260_train, y_260_train)
model_267.fit(x_267_train, y_267_train)
model_339.fit(x_339_train, y_339_train)


# Defining and Fitting Trans Models
#203
estimator_list_203 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_203 = StackingRegressor(estimators=estimator_list_203, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_203.fit(x_203_train, y_203_train)

#204
estimator_list_204 = [('dataset#203',model_339), ('dataset#204',model_203), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_204 = StackingRegressor(estimators=estimator_list_204, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_204.fit(x_204_train, y_204_train)

#205
estimator_list_205 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_203), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_205 = StackingRegressor(estimators=estimator_list_205, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_205.fit(x_205_train, y_205_train)

#228
estimator_list_228 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_203), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_228 = StackingRegressor(estimators=estimator_list_228, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_228.fit(x_228_train, y_228_train)

#233
estimator_list_233 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_203), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_233 = StackingRegressor(estimators=estimator_list_233, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_233.fit(x_233_train, y_233_train)

#251
estimator_list_251 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_203), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_251 = StackingRegressor(estimators=estimator_list_251, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_251.fit(x_251_train, y_251_train)

#253
estimator_list_253 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_203), ('dataset#260',model_260), ('dataset#267',model_267)]

stack_model_253 = StackingRegressor(estimators=estimator_list_253, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_253.fit(x_253_train, y_253_train)

#260
estimator_list_260 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_203), ('dataset#267',model_267)]

stack_model_260 = StackingRegressor(estimators=estimator_list_260, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_260.fit(x_260_train, y_260_train)

#267
estimator_list_267 = [('dataset#203',model_339), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_203)]

stack_model_267 = StackingRegressor(estimators=estimator_list_267, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_267.fit(x_267_train, y_267_train)

#339
estimator_list_339 = [('dataset#203',model_203), ('dataset#204',model_204), ('dataset#205',model_205), 
                  ('dataset#228',model_228), ('dataset#233',model_233), ('dataset#251',model_251), 
                  ('dataset#253',model_253), ('dataset#260',model_260), ('dataset#267',model_267)]


stack_model_339 = StackingRegressor(estimators=estimator_list_339, final_estimator=RandomForestRegressor(n_estimators=10))
stack_model_339.fit(x_339_train, y_339_train)



#R Squared Value


#Trans/Stacked Models 
TransModel_203_RSquared = stack_model_203.score(x_203_test, y_203_test)
TransModel_204_RSquared = stack_model_204.score(x_204_test, y_204_test)
TransModel_205_RSquared = stack_model_205.score(x_205_test, y_205_test)
TransModel_228_RSquared = stack_model_228.score(x_228_test, y_228_test)
TransModel_233_RSquared = stack_model_233.score(x_233_test, y_233_test)
TransModel_251_RSquared = stack_model_251.score(x_251_test, y_251_test)
TransModel_253_RSquared = stack_model_253.score(x_253_test, y_253_test)
TransModel_260_RSquared = stack_model_260.score(x_260_test, y_260_test)
TransModel_267_RSquared = stack_model_267.score(x_267_test, y_267_test)
TransModel_339_RSquared = stack_model_339.score(x_339_test, y_339_test)

#Base Models 
BaseModel_203_RSquared = model_203.score(x_203_test, y_203_test)
BaseModel_204_RSquared = model_204.score(x_204_test, y_204_test)
BaseModel_205_RSquared = model_205.score(x_205_test, y_205_test)
BaseModel_228_RSquared = model_228.score(x_228_test, y_228_test)
BaseModel_233_RSquared = model_233.score(x_233_test, y_233_test)
BaseModel_251_RSquared = model_251.score(x_251_test, y_251_test)
BaseModel_253_RSquared = model_253.score(x_253_test, y_253_test)
BaseModel_260_RSquared = model_260.score(x_260_test, y_260_test)
BaseModel_267_RSquared = model_267.score(x_267_test, y_267_test)
BaseModel_339_RSquared = model_339.score(x_339_test, y_339_test)


Trans_Vs_Base_203 = [TransModel_203_RSquared, BaseModel_203_RSquared]
Trans_Vs_Base_204 = [TransModel_204_RSquared, BaseModel_204_RSquared]
Trans_Vs_Base_205 = [TransModel_205_RSquared, BaseModel_205_RSquared]
Trans_Vs_Base_228 = [TransModel_228_RSquared, BaseModel_228_RSquared]
Trans_Vs_Base_233 = [TransModel_233_RSquared, BaseModel_233_RSquared]
Trans_Vs_Base_251 = [TransModel_251_RSquared, BaseModel_251_RSquared]
Trans_Vs_Base_253 = [TransModel_253_RSquared, BaseModel_253_RSquared]
Trans_Vs_Base_260 = [TransModel_260_RSquared, BaseModel_260_RSquared]
Trans_Vs_Base_267 = [TransModel_267_RSquared, BaseModel_267_RSquared]
Trans_Vs_Base_339 = [TransModel_339_RSquared, BaseModel_339_RSquared]

A = [Trans_Vs_Base_203, 
     Trans_Vs_Base_204,
     Trans_Vs_Base_205,
     Trans_Vs_Base_228,
     Trans_Vs_Base_233,
     Trans_Vs_Base_251,
     Trans_Vs_Base_253,
     Trans_Vs_Base_260,
     Trans_Vs_Base_267,
     Trans_Vs_Base_339]

A
